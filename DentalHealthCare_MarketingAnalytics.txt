USE [Scratch]
GO

/****** Object:  StoredProcedure [GD\Maks].[Usp_CallboxMB_V2]    Script Date: 10/13/2021 2:21:49 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--DROP PROCEDURE [GD\Maks].[Usp_CallboxMB_v2]
--EXEC [GD\Maks].[Usp_CallboxMB_V2]

-- =============================================
-- Author     : Susi Mak
-- Create date: 01/15/21
-- Description: 1) Creates Marketing Analytics Data Model for the Last 25 Months to Generate Physical Table by Matching Inbound and Outbound Calls, Solution Reach CRM
--                 , Patients and Transactions, and Insurance Across Dental Data
--              2) This Physical Table will be used for Power BI
-- Change History:
--   06/13/21 Susi Mak: Changed range of date to start from 01/01/19
--   01/01/22 Susi Mak: Add new stores
-- =============================================


CREATE PROCEDURE [GD\Maks].[Usp_CallboxMB_V2] 
AS
BEGIN 

SET ANSI_WARNINGS On;        
SET NOCOUNT ON;   

If OBJECT_ID('tempdb..#ApptTrans') IS NOT NULL BEGIN DROP TABLE #ApptTrans END	
SELECT DISTINCT 
        ClID_UniqID+' '+CONVERT(VARCHAR, DateID,23) AS ApptTransID
	, ClID_UniqID, ClID_LocID, Appt_ClID_UniqID, Dpms_ClID_UniqID, PatientKey, ClID_PatID, patientfullname, DateID
        , FORMAT(DAteID,'yyyy MM') DateIDMo
	, ApptDate, ApptDateMo, ApptDateInt, ApptCreate, ApptCreateInt,  ApptCreateMo, Apptphone, Appt_emp_create 
	, DoctorPerformanceMTDSnapshotDateKeY,DoctorPerformanceMTDSnapshotDate, DoctorPerformanceMTDSnapshotMo
	, IsNP, IsNPAppt ,IsEPAppt , Appt_Status, PatientVisitFlag --NewPatientFlag,
	, PatientBirthDate, AgeBracket, PatientFirstVisit, PatientFirstVisitMo  , OfficeID, GLCode, RegionCode, PatientLastVisit
	, FORMAT(CAST(CAST(PatientLastVisit AS VARCHAR) AS DATE), 'yyyy MM') PatientLastVstMo
	, TotalProductionAmount,TotalChargeAmount, PatientPhoneMobileInt MobileInt, PatientPhoneNumberOneInt Phone1Int, PatientPhoneNumberTwoInt Phone2Int
        , AccountTypeName, InsurancePlanName, NewPatientComprehensiveExamFlag NPComphExFlag, NewPatientLimitedExamFlag NPLtdExFlag, GPPedoNewPatientFlag NPGPPedoFlag		
INTO #ApptTrans
FROM (
	SELECT DISTINCT
		ROW_NUMBER() OVER (PARTITION BY ClID_UniqID, isnull(DoctorPerformanceMTDSnapshotDateKey, 19000101), isnull(apptdateint, 19000101)
		                       ORDER BY ClID_UniqID, isnull(DoctorPerformanceMTDSnapshotDateKey, 19000101), isnull(apptdateint, 19000101)
                                                , isnull(apptcreateint, 19000101), patientvisitflag desc, NewPatientComprehensiveExamFlag desc
                                                , NewPatientLimitedExamFlag desc, GPPedoNewPatientFlag desc) rn	
							
		, CASE WHEN DoctorPerformanceMTDSnapshotDateKey = PatientFirstVisitDate 
                       THEN 1 
                       ELSE 0 
                       END 'IsNP'
			
		, CASE WHEN (
                             ApptDateInt is not null AND isnull(ApptDateInt,19000101) = isnull(PatientFirstVisitDate,19000101)
			     OR 
                                (
                                 ApptDateInt is not null AND isnull(PatientFirstVisitDate,19000101) <= 19700101 	
                                )
                            ) 
                       THEN 1 
                       ELSE 0 
                       END 'IsNPAppt'

		, CASE WHEN (ApptDateInt is not null AND isnull(ApptDateInt,19000101) > isnull(PatientFirstVisitDate,19000101) 
                                                     AND isnull(PatientFirstVisitDate,19000101) > 19700101) 
		       THEN 1 
                       ELSE 0 
                       END 'IsEPAppt'

		, CAST(p.patientclinicuniqueid AS VARCHAR)+'-'+ CAST(p.patientuniqueid AS VARCHAR) ClID_PatID
		, patientfullname,PatientVisitFlag ,  Appt_Status ,ApptDate,  ApptCreate, ApptDAteInt, ApptCreateInt, ApptDAteMo, ApptCreateMo
                , ApptPhone, appt_emp_create,  tbl1.PatientKey, ClID_UniqID, Appt_ClID_UniqID, Dpms_ClID_UniqID, DateID
		, PatientFirstVisitDate, d.date PatientFirstVisit, d.PivotYearMonthName PatientFirstVisitMo, OfficeID, GLCode, RegionCode, ClID_LocID, p.PatientBirthDate																																																																																																																																																		
		
		, CASE WHEN p.PatientBirthDate is null THEN null
		       WHEN DATEDIFF(YEAR,CAST(CAST(p.patientbirthdate AS VARCHAR) AS DATE),GETDATE()) BETWEEN  0 AND 10 THEN '[ 0 - 10]'																																																																																																																																																														 																																																																																																																																																																			  
		       WHEN DATEDIFF(YEAR,CAST(CAST(p.patientbirthdate AS VARCHAR) AS DATE),GETDATE()) BETWEEN 11 AND 20 THEN '[11 - 20]'																																																																																																																																																														
		       WHEN DATEDIFF(YEAR,CAST(CAST(p.patientbirthdate AS VARCHAR) AS DATE),GETDATE()) BETWEEN 21 AND 30 THEN '[21 - 30]'		
		       WHEN DATEDIFF(YEAR,CAST(CAST(p.patientbirthdate AS VARCHAR) AS DATE),GETDATE()) BETWEEN 31 AND 40 THEN '[31 - 40]'		
		       WHEN DATEDIFF(YEAR,CAST(CAST(p.patientbirthdate AS VARCHAR) AS DATE),GETDATE()) BETWEEN 41 AND 50 THEN '[41 - 50]'		
		       WHEN DATEDIFF(YEAR,CAST(CAST(p.patientbirthdate AS VARCHAR) AS DATE),GETDATE()) BETWEEN 51 AND 60 THEN '[51 - 60]'	
		       WHEN DATEDIFF(YEAR,CAST(CAST(p.patientbirthdate AS VARCHAR) AS DATE),GETDATE()) BETWEEN 61 AND 70 THEN '[61 - 70]'																																																																																																																																																																					
		       ELSE '[ > 70]' 																																																																																																																																																															
		  END AgeBracket	

		, DoctorPerformanceMTDSnapshotDateKey, DoctorPerformanceMTDSnapshotDate	, DoctorPerformanceMTDSnapshotMo
		, MAX(DoctorPerformanceMTDSnapshotDate) OVER (PARTITION BY ClID_UniqID 
                                                                  ORDER BY ClID_UniqID,  DoctorPerformanceMTDSnapshotDate 
		 	                                     RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) PatientLastVisit
		, TotalProductionAmount, TotalChargeAmount
		, PatientPhoneMobileInt, PatientPhoneNumberOneInt, PatientPhoneNumberTwoInt
		, AccountTypeName, InsurancePlanName
		, NewPatientComprehensiveExamFlag, NewPatientLimitedExamFlag , GPPedoNewPatientFlag 	
	FROM
		(SELECT DISTINCT 
                          CASE WHEN Appt_ClId_UniqID IS NULL 
                               THEN Dpms_ClID_UniqID 
                               ELSE Appt_ClId_UniqID 
                               END ClID_UniqID 
			
			, CASE WHEN Appt_ClId_LocID IS NULL
                               THEN Dpms_ClID_LocID 
                               ELSE Appt_ClId_LocID 
                               END ClID_LocID 

			, CASE WHEN ApptDate IS NULL 
                               THEN DoctorPerformanceMTDSnapshotDate 
                               ELSE ApptDate 
                               END DateID

			, CASE WHEN ApptDateInt IS NOT NULL
                                    AND ApptDateInt = ISNULL(DoctorPerformanceMTDSnapshotDateKey,19000101) 
                                    AND PatientVisitFlag = 1 
                               THEN 'Show' 	

			       WHEN (ApptDateInt IS NOT NULL 
                                    	AND ApptDateInt <  CONVERT(INT,CONVERT(CHAR(8), GETDATE(), 112)) 
                                    	AND ApptDateInt = ISNULL(DoctorPerformanceMTDSnapshotDateKey,19000101)
                                    	AND PatientVisitFlag = 0
                                     )  
			 	    OR 
                                     (ApptDateInt IS NOT NULL 
                                          AND ApptDateInt <  CONVERT(INT,CONVERT(CHAR(8), GETDATE(), 112)) 
                                          AND ApptDateInt != ISNULL(DoctorPerformanceMTDSnapshotDateKey,19000101)  
                                     ) 
                               THEN 'NoShow'

			       WHEN ApptDAteInt IS NOT NULL 
                                    AND ApptDateInt >=  CONVERT(INT,CONVERT(CHAR(8), GETDATE(), 112))  
                               THEN 'Pending' 	
		 																																																																																																																																																													
   			       WHEN ApptDateInt IS NULL 
                                    AND DoctorPerformanceMTDSnapshotDateKey IS NOT NULL 
                                    AND PatientVisitFlag =1  
                               THEN 'WalkIn'	
				  
			       WHEN ApptDAteInt IS NULL 
                               THEN 'NoApptMade' 

			 END 'Appt_Status'

			, Appt_ClId_UniqID , dpms_clid_uniqID, OfficeID,  GLCode, RegionCode
			, DoctorPerformanceMTDSnapshotDateKey,  DoctorPerformanceMTDSnapshotDate, DoctorPerformanceMTDSnapshotMo, TotalProductionAmount
			, ApptDate,  ApptCreate, ApptDateMo,  ApptCreateMo, ApptDAteInt, ApptCreateInt, ApptPhone, appt_emp_create, PatientKey 
			, NewPatientComprehensiveExamFlag, NewPatientLimitedExamFlag, GPPedoNewPatientFlag, PatientVisitFlag
		FROM
			(SELECT DISTINCT
				CAST(a.clinic_id AS VARCHAR)+'-'+ CAST(a.unique_id AS VARCHAR) Appt_ClId_UniqID
				, CAST(a.clinic_id AS VARCHAR)+'-'+ CAST(a.derived_location_id AS VARCHAR) Appt_ClId_LocID
				, CAST(a.appt_date_time AS DATETIME) ApptDAteTime
                                , CAST(appt_date_created AS DATE) ApptCreate
                                , CAST(a.appt_date_time AS DATE) ApptDate
                                , appt_emp_create					
				, d1.DateKey ApptDateInt
				, d2.Datekey ApptCreateInt
				, d1.PivotYearMonthName ApptDateMo
				, d2.PivotYearMonthName ApptCreateMo
				, CAST(REPLACE(REPLACE(REPLACE(REPLACE(appt_phone,'(',''),')',''),'-',''),' ','') AS BIGINT)	ApptPhone
	
			  FROM [pdxprodsql01\appprod].[Amazon].[dbo].[appointments] a 	
			  LEFT JOIN [pdxprodsql01\AppProd].PatComm.dbo.vw_SolutionReach_Confirmation sc WITH (NOLOCK) 
			   	 ON sc.clinic_id=a.clinic_id AND sc.unique_id=a.unique_id 
                                                             AND sc.appt_date_time=a.appt_date_time
			  LEFT JOIN [pdxprodsql01\appprod].[DentalOperationsDW].[dbo].dimdate d1 WITH (NOLOCK) 
                                 ON d1.datekey = CONVERT(INT,CONVERT(CHAR(8), a.appt_date_time, 112))
			  LEFT JOIN [pdxprodsql01\appprod].[DentalOperationsDW].[dbo].dimdate d2 WITH (NOLOCK) 
                                 ON d2.datekey = CONVERT(INT,CONVERT(CHAR(8), a.appt_date_created, 112))
			  LEFT JOIN (-- rescheduled: exclude these
				     SELECT DISTINCT pt.clinic_id
					    , pt.unique_id
					    , CAST(pt.date_posted AS DATE) AS 'ServiceDate'

					    , MAX(CASE WHEN pt.trans_code IN (82,83,84) 
                                                       THEN 1 
                                                       ELSE 0 
                                                       END) AS 'Reschedule'

					    , MAX(CASE WHEN pt.trans_code NOT IN (82,83,84) AND PatientVisitFlag = 1 
                                                       THEN 1 
                                                       ELSE 0 
                                                       END) AS 'Visit'

				     FROM  [pdxprodsql01\appprod].[Amazon].dbo.patient_transactions pt WITH (NOLOCK) --07/17/2019 synonyms updated
				     
                                     LEFT JOIN [pdxprodsql01\appprod].[Amazon].dbo.transaction_codes_ext x WITH (NOLOCK)
                                            ON x.qsicode=pt.trans_code --07/17/2019 synonyms updated

				     WHERE pt.trans_code IN (82,83,84) -- rescheduled		
					   AND pt.date_posted >= '2018-07-01'
					   --AND DATEDIFF(MONTH,pt.date_posted,GETDATE())<=30 -- last 30 months

				     GROUP BY pt.clinic_id, pt.unique_id, pt.date_posted
				     ) rs
				          ON rs.clinic_id=a.clinic_id
					     AND rs.unique_id=a.unique_id
					     AND rs.servicedate=CAST(a.appt_date_time AS DATE)

			  WHERE Appt_date_Created >= '2018-07-01' or Createddate >= '2018-07-01' 
                                AND ---Appt_date_Created >= dateadd(month,-30, getdate()) or Createddate >= dateadd(month,-30, getdate())  and
				(
					rs.ServiceDate IS NULL -- exclude reschedule appointments
					OR (rs.ServiceDate IS NOT NULL AND rs.Reschedule=1 AND rs.Visit=0)
				) 
	    ) APPT 

	FULL JOIN (SELECT DISTINCT 
                          CAST(CASE WHEN dpms.ClinicUniqueID = -1 
                                    THEN 501 
                                    ELSE dpms.ClinicUniqueID 
                                    END AS VARCHAR)
                               +'-'+CAST(dpms.patientdatamineruniqueid AS VARCHAR) Dpms_ClID_UniqID 

		          ,CAST(CASE WHEN dpms.ClinicUniqueID = -1 
                                     THEN 501 
                                     ELSE dpms.ClinicUniqueID 
                                     END AS VARCHAR)
                                +'-'+CAST(dpms.LocationID AS VARCHAR) Dpms_ClID_LocID
		          
			  , dpms.PatientKey
                          , CAST(cl.officeid AS VARCHAR)+'-'+CAST(ClinicLocationName AS VARCHAR) OfficeID, cl.GLCode, cl.RegionCode
		          , DoctorPerformanceMTDSnapshotDateKey, [date] DoctorPerformanceMTDSnapshotDate, PivotYearMonthName  DoctorPerformanceMTDSnapshotMo
		          , totalproductionamount, NewPatientComprehensiveExamFlag, NewPatientLimitedExamFlag, GPPedoNewPatientFlag, PatientVisitFlag --, NewPatientFlag	
		
		   FROM DentalOperationsDW..factDoctorPerformanceMTDSnapshot  dpms 	
		  									
		   LEFT JOIN [pdxprodsql02\etlprod].[DentalOperationsDW].[dbo].dimClinicLocation CL WITH (NOLOCK) 
                          ON cl.ClinicLocationKey = dpms.ClinicLocationKey			
		   LEFT JOIN [pdxprodsql02\etlprod].[DentalOperationsDW].[dbo].dimdate d WITH (NOLOCK) 
                          ON d.datekey = dpms.DoctorPerformanceMTDSnapshotDateKey		   
		   --WHERE 1=1 AND CAST(CAST(DoctorPerformanceMTDSnapshotDateKey AS VARCHAR) AS DATE) >= DATEADD(MONTH,-30, GETDATE())
		   
		   WHERE 1=1 
                        AND CAST(CAST(DoctorPerformanceMTDSnapshotDateKey AS VARCHAR) AS DATE) >= '2018-07-01'
		   ) dpms 
                  ON dpms.Dpms_ClID_UniqID = appt.Appt_ClId_UniqID 
                     AND Appt.ApptDateInt = dpms.DoctorPerformanceMTDSnapshotDateKey										
	)TBL1
	LEFT JOIN DentalOperationsDW..dimpatient p WITH (NOLOCK) 
               ON CAST(p.PatientClinicUniqueID AS VARCHAR)+'-'+CAST(p.patientdatamineruniqueid AS VARCHAR) = tbl1.CLID_UniqID
	LEFT JOIN DentalOperationsDW..dimdate d WITH (NOLOCK) 
               ON d.datekey = p.PatientFirstVisitDate
	LEFT JOIN DentalOperationsDW..factPatientSnapshot fps WITH (NOLOCK) 
               ON fps.patientkey = p.PatientKey
	LEFT JOIN DentalOperationsDW..dimAccount A WITH (NOLOCK)
               ON p.PatientAccountKey = A.AccountKey	
	LEFT JOIN DentalOperationsDW..dimAccountType ACT WITH (NOLOCK)
               ON ACT.AccountTypeCode = A.AccountTypeCode																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																					
	LEFT JOIN [pdxprodsql01\AppProd].DentalOperationsDW.dbo.dimPatientInsurance PIns WITH (NOLOCK)
               ON p.PatientKey = PIns.PatientKey AND PIns.PatientInsuranceRecordID = 1 																																																																																																																																																																			                           																																																																																																																																																															
	LEFT JOIN [pdxprodsql01\AppProd].DentalOperationsDW.dbo.dimInsurancePlan ip WITH (NOLOCK)
               ON pins.InsurancePlanKey = ip.InsurancePlanKey
	) TBL2

WHERE rn = 1 
CREATE CLUSTERED INDEX indx_ApptTransID ON #ApptTrans (ApptTransID);

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

If OBJECT_Id('tempdb..#ApptTransPhoneUnpivot') IS NOT NULL BEGIN DROP TABLE #ApptTransPhoneUnpivot END																																																																																																																																																																	
SELECT DISTINCT  Appt_ClID_UniqID,  ApptTransID, apptDate, apptcreate, QSIphone																																																																																																																																																																																																																																																																																																																																																																																																																																																																																		
INTO #ApptTransPhoneUnpivot																																																																																																																																																																
FORM #ApptTrans																																																																																																																																																															
UNPIVOT (QSIphone FOR PhCategory IN (ApptPhone, MobileInt, Phone1Int, Phone2Int) ) unpvt 																																																																																																																																																																	
WHERE QSIphone <> 0 AND apptcreate IS NOT NULL 																								
GROUP BY Appt_ClID_UniqID, ApptTransID, QSIphone, ApptDate, Apptcreate

---Adition of Index
CREATE CLUSTERED INDEX indx_ApptTransID ON #ApptTransPhoneUnpivot (QSIPhone);

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
If OBJECT_Id('tempdb..#ApptTransPhoneUnpivot_vs_CBCallAttribution') IS NOT NULL BEGIN DROP TABLE #ApptTransPhoneUnpivot_vs_CBCallAttribution END																
SELECT																																																																																																																																																																																																																																																																																																																																		
	Appt_ClID_UniqID
	,ApptTransID
	,Apptcreate
	,Apptdate
	,QSIphone																																																																																																																																																																
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																									
	,CASE WHEN label1 = 'DUPLICATE OUTBOUND CALLER ID????' THEN 'Outbound' ELSE Label1 END Label1																																																																																																																																																														 
	,CASE WHEN label1 LIKE '%Outbound%' AND  PhoneCodeID = 'Unknown'                           THEN 'Unknown' 																																																																																																																																																														
	      WHEN label1 LIKE '%Outbound%' AND  PhoneCodeID >= 0       AND PhoneCodeID < 10000    THEN 'No OB Source Code' 																																																																																																																																																													
	      WHEN label1 LIKE '%Outbound%' AND  PhoneCodeID >= 10000   AND PhoneCodeID < 20000    THEN 'Other Digital' 																																																																																																																																																														
	      WHEN label1 LIKE '%Outbound%' AND  PhoneCodeID >= 20000   AND PhoneCodeID < 30000    THEN 'PPC' 																																																																																																																																																														
              WHEN label1 LIKE '%Outbound%' AND  PhoneCodeID >= 30000   AND PhoneCodeID < 40000    THEN 'SEO' 																																																																																																																																																														
	      WHEN label1 LIKE '%Outbound%' AND  PhoneCodeID >= 40000   AND PhoneCodeID < 50000    THEN 'Coupon' 																																																																																																																																																														
	      WHEN label1 LIKE '%Outbound%' AND  PhoneCodeID >= 50000   AND PhoneCodeID < 60000    THEN 'Other' 																																																																																																																																																														
	      WHEN label1 LIKE '%Outbound%' AND  PhoneCodeID >= 60000   AND PhoneCodeID < 70000    THEN 'No Show'																																																																																																																																																														
	      WHEN label1 LIKE '%Outbound%' AND  PhoneCodeID >= 70000                              THEN 'No Existing' 																																																																																																																																																														
	      WHEN label1 LIKE '%SEO%'      AND  label4 LIKE '%Anchor%' AND category LIKE '%paid%' THEN 'PPC' 																																																																																																																																																														
	 ELSE label1																																																																																																																																																																																																																																																																																																																											
	 END AdjLabel1 		
																																																																																																																																																													
	,Label4																																																																																																																																																															
	,CASE WHEN label1 LIKE '%Outbound%' THEN 'Outbound' 																																																																																																																																																															
	      WHEN label1 LIKE '%SEO%' AND label4 LIKE '%Anchor%' AND category LIKE '%paid%' THEN 'Anchor' 																																																																																																																																																														
	      ELSE label4 
              END AdjLabel4																																																																																																																																																															
	,CustomerNumber				
	,DATEADD(ms, DATEDIFF(ms, '00:00:00', [theTime]), CONVERT(DATETIME, [theDate])) CallDateTime 
	,SUM(DATEDIFF(SECOND, '0:00:00', duration )) DurationInSeconds
	,Duration
	,BilledMinutes
	,Disposition
	,Spam
	,StoreID																																																																																																																																																																																																																																																																																																																																						
	,PhoneCodeID 
	,[Scored_Patient_New_Existing__c] 																																																																																																																																																														
	,[Scored_Appt_Booked_Status__c]	
	,CallID
	,DNISNumber
	,devicetype
	,Referrer
	,AdwordsAdGroupName
	,Keywords
	,Category
	,UTMSource
	,UTMMedium
	,PageURl	
INTO #ApptTransPhoneUnpivot_vs_CBCallAttribution
FROM #ApptTransPhoneUnpivot																																																																																																																																																														
LEFT JOIN [pdxprodsql01\appprod].[Scratch].[dbo].[Patcomm_CallBoxData_Scratch] CB 																																																																																																																																																																
       ON #ApptTransPhoneUnpivot.QSIPhone = CB.customernumber and TheDate  <= apptcreate
GROUP BY 
	Appt_ClID_UniqID,ApptTransID
	,Apptcreate
	,Apptdate
	,QSIphone --,PhCategory 																																																																																																																																																																																																																																																																																																																																																																																																																																																																																											
	,Label1, PhoneCodeID, Label4, Category																																																																																																																																																																																																																																																																																																																																																																																																																																																																																							
	,CustomerNumber				
	,TheDAte																																																																																																																																																															
	,TheTime
	,Duration
	,BilledMinutes
	,Disposition
	,Spam
	,StoreID																																																																																																																																																																																																																																																																																																																																						
	,PhoneCodeID 
	,[Scored_Patient_New_Existing__c] 																																																																																																																																																														
	,[Scored_Appt_Booked_Status__c]	
	,CallID
	,DNISNumber
	,devicetype
	,Referrer
	,AdwordsAdGroupName
	,Keywords
	,Category
	,UTMSource
	,UTMMedium
	,PageURl	
ORDER BY Appt_ClID_UniqID,  QSIphone, apptdate, apptcreate

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

If OBJECT_Id('tempdb..#ApptTransPhoneUnpivot_vs_CBFirstCallAttribution') IS NOT NULL BEGIN DROP TABLE #ApptTransPhoneUnpivot_vs_CBFirstCallAttribution END																																																																																																																																																																	
SELECT *	
INTO #ApptTransPhoneUnpivot_vs_CBFirstCallAttribution		
FROM (
	SELECT
		ROW_NUMBER() OVER (PARTITION BY appt_clid_uniqid , apptcreate, apptdate 
                                       ORDER BY appt_clid_uniqid, apptcreate, apptdate,  ISNULL(calldatetime, '9999-12-31')) CallOrderFirstCallAttribution	
		,*																																																																																																																																																																																																																																																																																																																										
	FROM #ApptTransPhoneUnpivot_vs_CBCallAttribution
	) a
WHERE CallOrderFirstCAllAttribution = 1 

---Adition of Index
CREATE CLUSTERED INDEX indx_ApptTransID ON #ApptTransPhoneUnpivot_vs_CBFirstCallAttribution (ApptTransID);

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																						
If OBJECT_Id('tempdb..#ApptTransPhoneUnpivot_vs_CBLatestCallAttribution') IS NOT NULL BEGIN DROP TABLE #ApptTransPhoneUnpivot_vs_CBLatestCallAttribution END																																																																																																																																																																	
SELECT *	
INTO #ApptTransPhoneUnpivot_vs_CBLatestCallAttribution	
FROM (
	SELECT
		ROW_NUMBER() OVER (PARTITION BY appt_clid_uniqid , apptcreate, apptdate 
                                       ORDER BY appt_clid_uniqid, apptcreate , apptdate ,  ISNULL(calldatetime, '1900-12-31') DESC) CallOrderLatestCallAttribution
		,*																																																																																																																																																																																																																																																																																																																										
	FROM #ApptTransPhoneUnpivot_vs_CBCallAttribution
	--WHERE appt_clID_uniqID = '501-100031' 
	) a
WHERE CallOrderLatestCallAttribution = 1

---Adition of Index
CREATE CLUSTERED INDEX indx_ApptTransID ON #ApptTransPhoneUnpivot_vs_CBLatestCallAttribution (ApptTransID);	

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																			
If OBJECT_Id('tempdb..#ApptTransPhoneUnpivot_vs_CBCallDurationAttribution') IS NOT NULL BEGIN DROP TABLE #ApptTransPhoneUnpivot_vs_CBCallDurationAttribution END																																																																																																																																																																	
SELECT *	
INTO #ApptTransPhoneUnpivot_vs_CBCallDurationAttribution
FROM (
      SELECT
	    ROW_NUMBER() OVER (PARTITION BY appt_clid_uniqid, apptcreate, apptdate 
			           ORDER BY appt_clid_uniqid, apptcreate, apptdate, ISNULL(calldatetime, '9999-12-31')) CallOrderFirstCallAttribution				
	    ,CASE WHEN DurationInSeconds >= 120 
                  THEN ROW_NUMBER() OVER (PARTITIION BY appt_clid_uniqid, apptcreate, apptdate
                                                        , CASE WHEN DurationInSeconds >= 120 THEN 1 ELSE 0 END
				               ORDER BY appt_clid_uniqid, apptcreate, apptdate
                                                        , ISNULL(calldatetime, '9999-12-31')
                                                        , CASE WHEN DurationInSeconds >= 120 THEN 1 ELSE 0 END
                                         ) 
	          WHEN DurationInSeconds IS NULL
                  THEN ROW_NUMBER() OVER (PARTITION BY appt_clid_uniqid, apptcreate, apptdate
				              ORDER BY appt_clid_uniqid, apptcreate, apptdate
                                                       , ISNULL(calldatetime, '9999-12-31')
                                         ) 		
                  END 'CAllOrderCAllDurationAttribution'
	     ,*							
	    FROM #ApptTransPhoneUnpivot_vs_CBCallAttribution	
      --WHERE Appt_ClId_UniqID = '672-7400' ORDER BY Appt_ClId_UniqID, ApptCreate, ApptDate, calldatetime
     ) a
WHERE CallOrderCallDurationAttribution = 1

---Adition of Index
CREATE CLUSTERED INDEX indx_ApptTransID ON #ApptTransPhoneUnpivot_vs_CBCallDurationAttribution (ApptTransID);

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

IF OBJECT_ID('Scratch.GD\Maks.CallboxMB_V2', 'U') IS NOT NULL DROP TABLE [Scratch].[GD\Maks].CallboxMB_V2;   
SELECT	
	#ApptTrans.ClID_UniqID
	, CAST(#ApptTrans.DateID AS DATE) DateID
	, #ApptTrans.ClID_LocID
	, #ApptTrans.DateIDMo
	, #ApptTrans.ApptCreate
	, #ApptTrans.ApptCreateMo
	, #ApptTrans.ApptDate
	, #ApptTrans.ApptDateMo	
	, CAST(#ApptTrans.DoctorPerformanceMTDSnapshotDate AS DATE) DocSrvcDate
	, #ApptTrans.DoctorPerformanceMTDSnapshotMo DocSrvcMo
	, #ApptTrans.IsNP
	, #ApptTrans.IsNPAppt
	, #ApptTrans.IsEPAppt
	, #ApptTrans.Appt_Status ApptStatus
	, #ApptTrans.PatientVisitFlag VstFlag
	, CAST(#ApptTrans.PatientFirstVisit AS DATE) FirstVst
	, #ApptTrans.PatientFirstVisitMo FirstVstMo
	, CAST(#ApptTrans.PatientLastVisit AS DATE) LastVst
	, #ApptTrans.PatientLastVstMo LastVstMo
	, #ApptTrans.TotalProductionAmount ProdAmt
	, #ApptTrans.TotalChargeAmount TotChrgAmt
	, #ApptTrans.Apptphone
	, #ApptTrans.MobileInt
	, #ApptTrans.Phone1Int
	, #ApptTrans.Phone2Int
	, #ApptTrans.NPComphExFlag
	, #ApptTrans.NPLtdExFlag
	, #ApptTrans.NPGPPedoFlag
	, #ApptTrans.OfficeID
	, #ApptTrans.GLCode
	, #ApptTrans.RegionCode
	, #ApptTrans.AccountTypeName PayorType
	, #ApptTrans.InsurancePlanName PlanName

	, CASE WHEN GLcode IS NULL THEN NULL
	       WHEN GLCode IN ('02066',	'02050',	'02067',	'02076',	'02058',	'02061',	'02070',	'02084',	'02063',	'01050',	'01069',	'01079',	'01052',	'01151',
		               '01060',	'01058',	'01086',	'01065',	'01083',	'01090',	'01061',	'01057',	'01084',	'01150',	'01076',	'01053',	'01080',	'01064',
		    	       '01071',	'01062',	'01054',	'04285',	'04280',	'02081',	'04256',	'04154',	'04286',	'04150',	'04265',	'04282',	'04276',	'04281',	
			       '04268',	'04260',	'02053',	'02082',	'02059',	'02054',	'02072',	'02060',	'02062',	'02087',	'02052',	'02078',	'02056',	'02057',	
			       '02091',	'02069',	'02077',	'02088',	'02068',	'02074',	'02085',	'10152',	'10154',	'10150',	'10153',	'11353',	'11356',	'11367',	
			       '11354',	'11355',	'11365',	'11653',	'11358',	'11352',	'11371',	'13261',	'13267',	'13252',	'13265',	'13268',	'13279',	'13270',	
	                       '13350',	'13276',	'13272',	'13264',	'27158',	'27151',	'27159',	'27155',	'27152',	'27150',	'14357',	'14550',	'14450',	'14850',	
			       '14852',	'14370',	'14855',	'14352',	'14353',	'14860',	'21253',	'21262',	'22157',	'22153',	'21256',	'22155',	'21162',	'21251',	
			       '14369',	'11456',	'11457',	'11459',	'11460',	'11450',	'11369',	'11350',	'11758',	'11250',	'11654',	'11364',	'11351',	'11756',	
			       '22150',	'22151',	'21255',	'22152',	'21252',	'22156',	'22158',	'11650',	'11656',	'11155',	'11750',	'11651',	'11359',	'11150',	
			       '11551',	'11372',	'11156',	'11655',	'21151',	'22162',	'21152',	'21161',	'21154') 
	       THEN 1 ELSE 0 END 'SS' -- These 149 locations are based on Cedric's spreadsheet.

	, CASE WHEN GLcode IS NULL THEN NULL
	       WHEN GLcode IN ('02050', 	'02058', 	'02061', 	'02063', 	'02066', 	'02067', 	'02070', 	'02076', 	'02084', 	'01050', 	'01052', 	'01058', 	'01060', 	'01061', 	
			       '01065', 	'01069', 	'01079', 	'01083', 	'01090', 	'01151', 	'01053', 	'01054', 	'01057', 	'01062', 	'01064', 	'01071', 	'01076', 	'01080', 	
			       '01084', 	'01150', 	'04150', 	'04151', 	'04152', 	'04156', 	'04251', 	'04259', 	'04261', 	'04265', 	'04267', 	'04268', 	'04276', 	'04281', 
			       '04282', 	'04284', 	'04350', 	'02053', 	'02054', 	'02059', 	'02060', 	'02062', 	'02072', 	'02082', 	'02087', 	'03050', 	'03053', 	'02052', 	
			       '02056', 	'02057', 	'02068', 	'02069', 	'02074', 	'02077', 	'02078', 	'02085', 	'02088', 	'10150', 	'10152', 	'10153', 	'10154', 	'11352', 	
			       '11353', 	'11354', 	'11355', 	'11356', 	'11358', 	'11365', 	'11367', 	'11371', 	'11653', 	'13252', 	'13261', 	'13264', 	'13265', 	'13267', 	
			       '13268', 	'13270', 	'13272', 	'13276', 	'13350', 	'27150', 	'27151', 	'27152', 	'27155', 	'27158', 	'27159', 	'14352', 	'14353', 	'14357', 	
			       '14370', 	'14450', 	'14550', 	'14850', 	'14852', 	'14855', 	'14860', 	'21162', 	'21251', 	'21253', 	'21256', 	'21262', 	'21265', 	'21266', 	
			       '21268', 	'21274', 	'22153', 	'22155', 	'22157', 	'22160', 	'11400', 	'11403', 	'11450', 	'11456', 	'11457', 	'11459', 	'11460', 	'14369', 
			       '11422', 	'11421', 	'11250', 	'11350', 	'11351', 	'11364', 	'11369', 	'11654', 	'11756', 	'11758', 	'21252', 	'21255', 	'21267', 	'22100', 	
			       '22150', 	'22151', 	'22152', 	'22156', 	'22158', 	'22161', 	'22122', 	'11150', 	'11156', 	'11359', 	'11372', 	'11551', 	'11650', 	'11651', 	
			       '11655', 	'21151', 	'21152', 	'21154', 	'21161', 	'21271', 	'21272', 	'22162')
     	       THEN 1 ELSE 0 END  'BS' -- These 162 locations are based on R01 thru R20 (exclude R05, Lab, Accrual, Eliminations, DefComp, & anything like [99%]

	, #ApptTrans.ClID_PatID
	, #ApptTrans.PatientFullName
	, #ApptTrans.PatientBirthDAte BirthDAte
	, #ApptTrans.AgeBracket AgeBracket
	, #ApptTrans.Appt_emp_create ApptEmpCreate

	, CB.FirstCallAttr_CallDateTime
	, CB.FirstCallAttr_Duration
	, CB.FirstCallAttr_Label1
	, CB.FirstCallAttr_AdjLabel1
	, CB.FirstCallAttr_Label4
	, CB.FirstCallAttr_AdjLabel4

	, CB.LatestCallAttr_CallDateTime
	, CB.LatestCallAttr_Duration
	, CB.LatestCallAttr_Label1
	, CB.LatestCallAttr_AdjLabel1
	, CB.LatestCallAttr_Label4
	, CB.LatestCallAttr_AdjLabel4

	, CB.DurationCallAttr_CallDateTime
	, CB.DurationCallAttr_Duration
	, CB.DurationCallAttr_Label1
	, CB.DurationCallAttr_AdjLabel1
	, CB.DurationCallAttr_Label4
	, CB.DurationCallAttr_AdjLabel4

	, CB.StoreID
	, CB.PhoneCodeID
	, CB.CallID
	, CB.DNISNumber
	, CB.DeviceType
	, CB.Referrer	
	, CB.AdwordsAdGroupName	
	, CB.Keywords	
	, CB.Category	
	, CB.UTMSource	
	, CB.UTMMedium	
	, CB.PageURL
	, CB.[Scored_Patient_New_Existing__c]
	, CB.[Scored_Appt_Booked_Status__c]

INTO [Scratch].[GD\Maks].CallboxMB_V2  
FROM #ApptTrans
LEFT JOIN (SELECT	
		CB0.Appt_ClId_UniqID
		, CB0.ApptTransID
		, CB0.ApptDate
		, CB0.ApptCreate
		, CB0.QSIPhone
		, CB0.StoreID
			
		, CB1.CallDateTime FirstCallAttr_CallDateTime
		, CB1.Duration     FirstCallAttr_Duration
		, CB1.Label1       FirstCallAttr_Label1
		, CB1.AdjLabel1    FirstCallAttr_AdjLabel1
		, CB1.Label4       FirstCallAttr_Label4
		, CB1.AdjLabel4    FirstCallAttr_AdjLabel4
					
		, CB2.CallDateTime LatestCallAttr_CallDateTime
		, CB2.Duration     LatestCallAttr_Duration
		, CB2.Label1       LatestCallAttr_Label1
		, CB2.AdjLabel1    LatestCallAttr_AdjLabel1
		, CB2.Label4       LatestCallAttr_Label4
		, CB2.AdjLabel4    LatestCallAttr_AdjLabel4
			
		, CB3.CallDateTime DurationCallAttr_CallDateTime
		, CB3.Duration     DurationCallAttr_Duration
		, CB3.Label1       DurationCallAttr_Label1
		, CB3.AdjLabel1    DurationCallAttr_AdjLabel1
		, CB3.Label4       DurationCallAttr_Label4
		, CB3.AdjLabel4    DurationCallAttr_AdjLabel4
			
		, CB0.PhoneCodeID
		, CB0.CallID
		, CB0.DNISNumber
		, CB0.DeviceType
		, CB0.Referrer	
		, CB0.AdwordsAdGroupName	
		, CB0.Keywords	
		, CB0.Category	
		, CB0.UTMSource	
		, CB0.UTMMedium	
		, CB0.PageURL
		, CB0.[Scored_Patient_New_Existing__c]
		, CB0.[Scored_Appt_Booked_Status__c]
			
	FROM #ApptTransPhoneUnpivot_vs_CBCallDurationAttribution CB0
	LEFT JOIN #ApptTransPhoneUnpivot_vs_CBFirstCallAttribution    CB1	
	       ON CB0.ApptTransID =  CB1.ApptTransID
	LEFT JOIN #ApptTransPhoneUnpivot_vs_CBLatestCallAttribution   CB2
               ON CB1.ApptTransID =  CB2.ApptTransID
	LEFT JOIN #ApptTransPhoneUnpivot_vs_CBCallDurationAttribution CB3
	       ON CB2.ApptTransID =  CB3.ApptTransID
	) CB ON CB.ApptTransID =  #ApptTrans.ApptTransID	
WHERE DAteID >= '2019-01-01'
	
--WHERE DAteID >= DATEADD(DAY,1,EOMONTH(DATEADD(MONTH, -26, GETDATE())))

END 
GO


